// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Langs {
    PORTUGUESE
    ENGLISH
    SPANISH
    FRENCH
    ITALIAN
    GERMAN
    TURKISH
    RUSSIAN
    ARABIC
    PORTUGUESE_BRAZILIAN
}

model Book {
    id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    stripeId         String             @unique
    isAvailable      Boolean            @default(true)
    price            Decimal            @default(0) @db.Decimal(10, 4)
    title            String
    description      String
    pages            Int
    publicationDate  DateTime
    isbn10Code       String?            @db.VarChar(10)
    isbn13Code       String?            @db.VarChar(13)
    edition          Int                @default(1)
    language         Langs              @default(PORTUGUESE_BRAZILIAN)
    AuthorOnBook     AuthorOnBook[]
    TranslatorOnBook TranslatorOnBook[]
    CategoryOnBook   CategoryOnBook[]
    Publisher        Publisher          @relation(fields: [publisherId], references: [id])
    publisherId      String             @db.Uuid
    DisplayImage     DisplayImage[]
    placeInSeries    Int                @default(0)
    Series           Series?            @relation(fields: [seriesId], references: [id])
    seriesId         String?            @db.Uuid
    RelatedBook      Book?              @relation("BookToBook", fields: [relatedBookId], references: [id])
    relatedBookId    String?            @db.Uuid
    RelatedBooks     Book[]             @relation("BookToBook")
}

model Series {
    id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name String
    Book Book[]
}

model DisplayImage {
    id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    url    String
    order  Int    @default(0)
    Book   Book   @relation(fields: [bookId], references: [id])
    bookId String @db.Uuid
}

model Publisher {
    id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name String
    Book Book[]
}

model AuthorOnBook {
    Book     Book    @relation(fields: [bookId], references: [id])
    bookId   String  @db.Uuid
    Author   Author  @relation(fields: [authorId], references: [id])
    authorId String  @db.Uuid
    main     Boolean

    @@id([bookId, authorId])
}

model Author {
    id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String
    about        String
    imgUrl       String
    AuthorOnBook AuthorOnBook[]
}

model TranslatorOnBook {
    Book         Book       @relation(fields: [bookId], references: [id])
    bookId       String     @db.Uuid
    Translator   Translator @relation(fields: [translatorId], references: [id])
    translatorId String     @db.Uuid
    main         Boolean

    @@id([bookId, translatorId])
}

model Translator {
    id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name             String
    TranslatorOnBook TranslatorOnBook[]
}

model SuperCategory {
    id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name     String
    iconSvg  String?
    Category Category[]
}

model CategoryOnBook {
    Book       Book     @relation(fields: [bookId], references: [id])
    bookId     String   @db.Uuid
    Category   Category @relation(fields: [categoryId], references: [id])
    categoryId String   @db.Uuid
    main       Boolean

    @@id([bookId, categoryId])
}

model Category {
    id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name            String
    CategoryOnBook  CategoryOnBook[]
    SuperCategory   SuperCategory?   @relation(fields: [superCategoryId], references: [id])
    superCategoryId String?          @db.Uuid
}

model Address {
    id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId       String  @unique
    cep          String
    state        String
    city         String
    neighborhood String
    street       String
    number       Int
    complement   String?
}
