// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Book {
    id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    stripeId         String             @unique
    price            Decimal            @db.Decimal(8, 4)
    amount           Int
    title            String
    descriptionTitle String             @db.VarChar(100)
    description      String
    pages            Int
    publicationDate  DateTime
    isbn10Code       String             @db.VarChar(10)
    isbn13Code       String             @db.VarChar(14)
    width            Int
    height           Int
    length           Int
    edition          String?
    AuthorOnBook     AuthorOnBook[]
    TranslatorOnBook TranslatorOnBook[]
    Category         Category           @relation(fields: [categoryId], references: [id])
    categoryId       String             @db.Uuid
    Publisher        Publisher          @relation(fields: [publisherId], references: [id])
    publisherId      String             @db.Uuid
    Language         Language           @relation(fields: [languageId], references: [id])
    languageId       String             @db.Uuid
    DisplayImage     DisplayImage[]
    Series           Series?            @relation(fields: [seriesId], references: [id])
    seriesId         String?            @db.Uuid
    currency         Currency           @relation(fields: [currencyId], references: [id])
    currencyId       String             @db.Uuid
}

model Currency {
    id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    label       String @db.VarChar(5)
    iso4217Code String @db.VarChar(4)
    Book        Book[]
}

model Series {
    id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name String
    Book Book[]
}

model DisplayImage {
    id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    url    String
    order  Int    @default(0)
    Book   Book   @relation(fields: [bookId], references: [id])
    bookId String @db.Uuid
}

model Language {
    id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String
    iso6392Code String @db.VarChar(3)
    iso6391Code String @db.VarChar(2)
    Book        Book[]
}

model Publisher {
    id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name String
    Book Book[]
}

model AuthorOnBook {
    Book     Book    @relation(fields: [bookId], references: [id])
    bookId   String  @db.Uuid
    Author   Author  @relation(fields: [authorId], references: [id])
    authorId String  @db.Uuid
    main     Boolean

    @@id([bookId, authorId])
}

model Author {
    id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name         String
    about        String
    imgUrl       String
    AuthorOnBook AuthorOnBook[]
}

model TranslatorOnBook {
    Book         Book       @relation(fields: [bookId], references: [id])
    bookId       String     @db.Uuid
    Translator   Translator @relation(fields: [translatorId], references: [id])
    translatorId String     @db.Uuid
    main         Boolean

    @@id([bookId, translatorId])
}

model Translator {
    id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name             String
    TranslatorOnBook TranslatorOnBook[]
}

model Category {
    id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name    String
    iconUrl String?
    Book    Book[]
}
